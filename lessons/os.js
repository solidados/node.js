/** Модуль, который позволяет взаимодействовать с операционной системой */
const os = require('os')

// ? -- .platform() - возвращает название текущей ОС
// console.log(os.platform()); // darwin

// ? -- .arch() - возвращает архитектуру процессора
// console.log(os.arch()); // x64

// ? -- .cpus() - возвращает массив, где каждый объект этого массива – это описание ядра процессора
// console.log(os.cpus().length) // 4

/** в зависимости от длины массива, то есть от количества ядер, можно запускать
 * различное количество процессов, чтобы распараллелить нагрузку на процессор.
 * То есть мы в цикле:
 * - проходим по количеству ядер;
 * - получаем соответствующее ядро;
 * - запускаем процесс; (желательно оставить одно-два ядра свободными, чтобы они были заняты ОС*/
// const cpus = os.cpus()
//
// for (let i = 0; i < cpus.length - 1; i += 1) {
//   const CPUcore = cpus[i]
//   console.log('Запустить ещё один node.js процесс');
// }
//
// console.log(process.pid);
  // ? -- cluster – модуль предназначен для того, чтобы однопоточному Node.js приложению
  // ? использовать все возможности многоядерных систем, и запускать дочерние процессы
  // ! Начиная с Node.js v16 api cluster немного поменялся, и работать с ним нужно по-другому.
const cluster = require('cluster')

const cpus = os.cpus()

// ? если процесс главный, то мы должны запустить дочерние процессы:
if (cluster.isMaster) {
  for (let i = 0; i < cpus.length - 1; i += 1) {
    cluster.fork() // таким образом запускается дочерний процесс
  }
  // процесс может упасть, и вот тут можно подписываться на определённые события:
  cluster.on('exit', (worker, code, signal) => {
    console.log(`Воркер с pid=${worker.process.pid} убился! О_о`);
    // и сразу же запускаем снова процесс, чтобы работало максимальное кол-во Воркеров:
    // cluster.fork()

    // <- но если процесс всё же нужно остановить, то callback передаём (code, signal) и:
    if (code ===) {
      cluster.fork()
    } else {
      console.log('Процесс умер и восстановлению не подлежит');
    }
  })
} else {
  console.log(`Воркер с pid=${process.pid} запущен...`);

  setInterval(() => {
    console.log(`Воркер с pid=${process.pid} всё ещё работает...`);
  }, 5000)
}
